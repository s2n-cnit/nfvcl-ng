import hashlib
import uuid
from datetime import datetime, timezone
from enum import Enum
from typing import Optional
from pydantic import Field, field_validator
from nfvcl_core.models.base_model import NFVCLBaseModel

class UserRole(str, Enum):
    """
    Enum representing the supported user roles.
    """
    ADMIN = 'admin'
    USER = 'user'


class User(NFVCLBaseModel):
    """
    User model representing a user in the system.

    Attributes:
        id (str): Unique identifier for the user, generated by default.
        username (str): Username of the user.
        password_hash (str): Hashed password of the user.
        email (Optional[str]): Email address of the user, optional.
        role (UserRole): Role of the user, defaults to 'user'.
        created_at (datetime): Timestamp when the user was created, defaults to current UTC time.
        updated_at (Optional[datetime]): Timestamp when the user was last updated, optional.
        access_token_hashed (Optional[str]): Hashed access token, optional.
        access_token_hash_algorithm (Optional[str]): Algorithm used to hash the access token, optional.
        access_token_expiration (Optional[datetime]): Expiration time of the access token, optional.
        refresh_token_hashed (Optional[str]): Hashed refresh token, optional.
        refresh_token_hash_algorithm (Optional[str]): Algorithm used to hash the refresh token, optional.
        refresh_token_expiration (Optional[datetime]): Expiration time of the refresh token, optional.
    """
    id: str = Field(default_factory=lambda: str(uuid.uuid4()))
    username: str = Field()
    password_hash: str = Field()
    email: Optional[str] = Field(default=None)
    role: UserRole = Field(default=UserRole.USER)
    created_at: datetime = Field(default=datetime.now(timezone.utc))
    updated_at: Optional[datetime] = Field(default=None)
    access_token_hashed: Optional[str] = Field(default=None)
    access_token_hash_algorithm: Optional[str] = Field(default=None)
    access_token_expiration: Optional[datetime] = Field(default=None)
    refresh_token_hashed: Optional[str] = Field(default=None)
    refresh_token_hash_algorithm: Optional[str] = Field(default=None)
    refresh_token_expiration: Optional[datetime] = Field(default=None)

    @field_validator('password_hash', mode='before')
    def hash_password_validator(cls, password):
        """
        Validator to hash the password if it is not already hashed.

        Args:
            password (str): The password to be hashed.

        Returns:
            str: The hashed password.
        """
        if len(password) == 64 and all(c in '0123456789abcdef' for c in password):
            return password
        return hashlib.sha256(password.encode()).hexdigest()
