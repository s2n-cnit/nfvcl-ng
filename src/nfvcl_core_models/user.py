import hashlib
import uuid
from datetime import datetime, timezone
from enum import Enum
from typing import Optional

from pydantic import Field, field_validator, EmailStr

from nfvcl_core_models.base_model import NFVCLBaseModel

# DB_TOKEN_HASH_ALGORITHM is the algorithm used for hashing the tokens (generated with USER_TOKEN_HASH_ALGORITHM)  stored in the database.
USER_PASSWORD_HASH_ALGORITHM = 'sha256'

class TokenStatus(int, Enum):
    """
    Enum representing the status of a token.
    """
    VALID = 0
    INVALID = 1
    EXPIRED = 2
    DELETED = 3


class UserRole(str, Enum):
    """
    Enum representing the supported user roles.
    """
    ADMIN = 'admin'
    USER = 'user'


class UserNoConfidence(NFVCLBaseModel):
    """
    User model representing no confidence data of a user.

    Attributes:
        id (str): Unique identifier for the user, generated by default.
        username (str): Username of the user.
        email (Optional[str]): Email address of the user, optional.
        role (UserRole): Role of the user, defaults to 'user'.
    """

    id: str = Field(default_factory=lambda: str(uuid.uuid4()))
    username: str = Field()
    email: Optional[EmailStr] = Field(default=None)
    role: UserRole = Field(default=UserRole.USER)


class UserCreateREST(NFVCLBaseModel):
    """
    User model representing the data required to create a user.

    Attributes:
        username (str): Username of the user.
        password (str): Password of the user.
        role (UserRole): Role of the user, defaults to 'user'.
    """
    username: str = Field(description="The username to be given at the user", pattern=r'^[a-zA-Z0-9]+$', max_length=12)
    password: str = Field(description="The password to be given at the user", min_length=8, max_length=32)
    role: UserRole = Field(default=UserRole.USER)
    email: Optional[EmailStr] = Field(default=None)


class User(UserNoConfidence):
    """
    User model representing a user in the system.

    Attributes:
        id (str): Unique identifier for the user, generated by default.
        username (str): Username of the user.
        password_hash (str): Hashed password of the user.
        email (Optional[str]): Email address of the user, optional.
        role (UserRole): Role of the user, defaults to 'user'.
        created_at (datetime): Timestamp when the user was created, defaults to current UTC time.
        updated_at (Optional[datetime]): Timestamp when the user was last updated, optional.
        access_token_hashed (Optional[str]): Hashed access token, optional.
        access_token_hash_algorithm (Optional[str]): Algorithm used to hash the access token, optional.
        access_token_expiration (Optional[datetime]): Expiration time of the access token, optional.
        refresh_token_hashed (Optional[str]): Hashed refresh token, optional.
        refresh_token_hash_algorithm (Optional[str]): Algorithm used to hash the refresh token, optional.
        refresh_token_expiration (Optional[datetime]): Expiration time of the refresh token, optional.
    """
    password_hash: str = Field()
    password_hash_type: str = Field(default=USER_PASSWORD_HASH_ALGORITHM)
    created_at: datetime = Field(default=datetime.now(timezone.utc))
    updated_at: Optional[datetime] = Field(default=None)
    access_token_hashed: Optional[str] = Field(default=None)
    access_token_hash_algorithm: Optional[str] = Field(default=None)
    access_token_expiration: Optional[datetime] = Field(default=None)
    refresh_token_hashed: Optional[str] = Field(default=None)
    refresh_token_hash_algorithm: Optional[str] = Field(default=None)
    refresh_token_expiration: Optional[datetime] = Field(default=None)

    @field_validator('password_hash', mode='before')
    def hash_password_validator(cls, password):
        """
        Validator to hash the password if it is not already hashed.

        Args:
            password (str): The password to be hashed.

        Returns:
            str: The hashed password.
        """
        if len(password) == 64 and all(c in '0123456789abcdef' for c in password):
            return password
        return hashlib.sha256(password.encode()).hexdigest()

    def get_no_confidence_model(self):
        """
        Returns a UserNoConfidence model with the same data as this user.

        Returns:
            UserNoConfidence: The UserNoConfidence model.
        """
        return UserNoConfidence(id=self.id, username=self.username, email=self.email, role=self.role)
